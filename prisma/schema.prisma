// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User model for authenticated users (via Clerk)
model User {
    id        String   @id @default(cuid())
    clerkId   String   @unique // Clerk user ID
    email     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Subscription info
    isPremium      Boolean @default(false)
    subscriptionId String? // Stripe subscription ID
    customerId     String? // Stripe customer ID

    // User preferences
    defaultFramework String? // Default therapeutic framework
    niche            String? // Content niche (e.g., "fitness", "productivity")
    contentStyle     String? // Content style preferences

    // Usage tracking for freemium limits
    sessionsThisMonth Int      @default(0)
    lastSessionReset  DateTime @default(now())

    // Relationships
    sessions          Session[]
    subscriptionUsage SubscriptionUsage[]

    @@map("users")
}

// Session model - supports both anonymous and authenticated users
model Session {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // User association - either authenticated user or anonymous temp ID
    userId String?
    tempId String? // For anonymous users (UUID from localStorage)
    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Session details
    title                String?
    therapeuticFramework String // Which framework was selected (socratic, narrative, etc.)
    status               String  @default("active") // active, completed, abandoned

    // Session metadata
    isAnonymous        Boolean @default(false)
    migratedFromTempId String? // Track if this was migrated from anonymous session

    // Relationships
    conversations Conversation[]
    outlines      ContentOutline[]
    audioFiles    AudioFile[]

    // Indexes for performance
    @@index([userId])
    @@index([tempId])
    @@index([createdAt])
    @@map("sessions")
}

// Conversation model - represents the back-and-forth dialogue
model Conversation {
    id        String   @id @default(cuid())
    sessionId String
    session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Conversation metadata
    summary           String? // AI-generated summary of the conversation
    totalInteractions Int     @default(0) // Number of back-and-forth exchanges

    // Relationships
    messages Message[]

    @@index([sessionId])
    @@map("conversations")
}

// Message model - individual messages in a conversation
model Message {
    id             String       @id @default(cuid())
    conversationId String
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    createdAt      DateTime     @default(now())

    // Message details
    type     String // "user" or "ai"
    content  Json // Flexible content - text for user, structured object for AI (summary, questions)
    sequence Int // Order of message in conversation

    // For user messages that came from audio
    transcription String? // Original transcription if this was from audio
    audioFileId   String? // Reference to the audio file if applicable
    audioFile     AudioFile? @relation(fields: [audioFileId], references: [id], onDelete: SetNull)

    // AI message metadata
    aiModel        String? // Which AI model was used (gemini-2.0-flash, claude-3.5-sonnet)
    processingTime Float? // Time taken to generate response (ms)
    tokenCount     Int? // Tokens used for this response

    @@index([conversationId])
    @@index([type])
    @@map("messages")
}

// Content outline model - generated TikTok content outlines
model ContentOutline {
    id        String   @id @default(cuid())
    sessionId String
    session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Outline content
    title        String
    hook         String?
    mainPoints   Json // Array of main points/story beats
    callToAction String?
    visualIdeas  Json // Array of visual/shot ideas

    // Generation context
    conversationSummary String? // Summary that was used to generate this outline
    nicheStyle          String? // Niche/style preferences used

    // Metadata
    generatedBy String? // AI model used to generate
    tokenCount  Int? // Tokens used for generation

    // User interactions
    downloaded   Boolean   @default(false)
    downloadedAt DateTime?
    exportFormat String? // pdf, txt, md

    @@index([sessionId])
    @@map("content_outlines")
}

// Audio file model - tracks uploaded/recorded audio files
model AudioFile {
    id        String   @id @default(cuid())
    sessionId String
    session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    // File details
    originalUrl String // UploadThing URL
    filename    String
    fileSize    Int? // File size in bytes
    duration    Float? // Duration in seconds
    format      String? // File format (mp3, wav, etc.)

    // Processing status
    transcriptionStatus String    @default("pending") // pending, processing, completed, failed
    transcriptionText   String? // The transcribed text
    transcribedAt       DateTime?

    // Error handling
    errorMessage String? // If transcription failed
    retryCount   Int     @default(0)

    // Deletion tracking (files are auto-deleted after transcription per PRD)
    deletedAt DateTime?

    // Relationships
    messages Message[]

    @@index([sessionId])
    @@index([transcriptionStatus])
    @@map("audio_files")
}

// Analytics model - track usage for business metrics
model SessionAnalytics {
    id        String   @id @default(cuid())
    sessionId String   @unique
    createdAt DateTime @default(now())

    // Session metrics
    totalMessages   Int     @default(0)
    totalAudioFiles Int     @default(0)
    totalOutlines   Int     @default(0)
    sessionDuration Float? // Total session time in minutes
    completedFlow   Boolean @default(false) // Did user complete to outline generation

    // User type
    isAnonymous     Boolean @default(false)
    convertedToUser Boolean @default(false) // Anonymous user that signed up

    // Framework usage
    therapeuticFramework String

    @@map("session_analytics")
}

// Subscription tracking for freemium model
model SubscriptionUsage {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    month     Int // Month (1-12)
    year      Int // Year
    createdAt DateTime @default(now())

    // Usage counts
    sessionsUsed  Int @default(0)
    sessionsLimit Int @default(8) // 8 for free, unlimited for premium

    // Reset tracking
    lastReset DateTime @default(now())

    @@unique([userId, month, year])
    @@map("subscription_usage")
}

// Temporary sessions for anonymous users (cleanup after 7 days)
model TempSession {
    id        String   @id @default(cuid())
    tempId    String   @unique // The localStorage UUID
    createdAt DateTime @default(now())
    expiresAt DateTime // 7 days from creation

    // Migration tracking
    migratedToUserId String?
    migratedAt       DateTime?

    @@index([tempId])
    @@index([expiresAt])
    @@map("temp_sessions")
}
